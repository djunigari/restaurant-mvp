// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String    // se usar senha local
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role      Role     @default(USER)

  Session Session[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Comanda{
  id       Int           @id @default(autoincrement())
  status   ComandaStatus @default(OPEN)
  deletedAt  DateTime?
  
  orders Order[]
}

model Order {
  id          Int           @id @default(autoincrement())
  paidAt      DateTime?
  canceledAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  comanda   Comanda      @relation(fields: [comandaId], references: [id])
  comandaId Int

  items OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  deletedAt  DateTime?

  @@unique([orderId, productId])
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  price       Float
  deletedAt  DateTime?

  OrderItem OrderItem[]
}

enum ComandaStatus {
  OPEN
  OCCUPIED
}

model Device {
  id          String   @id @default(uuid())
  name        String
  fingerprint String
  authorized  Boolean  @default(false)
  userAgent    String
  lastKnownIp  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}